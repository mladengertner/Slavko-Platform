import { Resend } from 'resend';
import * as functions from "firebase-functions";

// In a monorepo, these types would be shared. For simplicity, we define them here.
export interface IdeaForEmail {
  title: string;
  description: string;
  slavkoScore: number;
}

export interface BuildForEmail {
  ideaTitle: string;
  status: "success" | "failed";
  stagingUrl?: string;
}

export interface SubscriptionForEmail {
  planName: string;
  status: 'active' | 'canceled' | 'past_due';
}


const emailStyles = `
  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f7; color: #333; }
  .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; padding: 30px; border: 1px solid #e2e2e2; }
  .header { border-bottom: 1px solid #e2e2e2; padding-bottom: 20px; margin-bottom: 20px; text-align: center; }
  .header h1 { margin: 0; font-size: 24px; color: #5c6ac4; }
  .content h2 { font-size: 20px; margin-bottom: 15px; }
  .card { border: 1px solid #e2e2e2; border-radius: 6px; padding: 20px; margin-bottom: 20px; }
  .button { display: inline-block; background-color: #5c6ac4; color: #ffffff !important; text-decoration: none; padding: 12px 20px; border-radius: 5px; font-weight: bold; }
  .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #888; }
`;

const createHtmlTemplate = (title: string, body: string) => `
<!DOCTYPE html>
<html>
<head>
  <title>${title}</title>
  <style>${emailStyles}</style>
</head>
<body>
  <div class="container">
    <div class="header"><h1>InnovaForge‚Ñ¢</h1></div>
    <div class="content">
      <h2>${title}</h2>
      ${body}
    </div>
    <div class="footer"><p>&copy; ${new Date().getFullYear()} InnovaForge‚Ñ¢. All rights reserved.</p></div>
  </div>
</body>
</html>
`;

export const sendIdeaGeneratedEmail = async (resend: Resend, idea: IdeaForEmail, userEmail: string) => {
  const subject = `üöÄ New Idea Generated: ${idea.title}`;
  const body = `
    <p>A new idea has been generated by the InnovaForge‚Ñ¢ engine!</p>
    <div class="card">
        <h3>${idea.title}</h3>
        <p>${idea.description}</p>
        <p><strong>Slavko Score:</strong> ${idea.slavkoScore}/10</p>
    </div>
    <a href="${functions.config().app.url || 'http://localhost:5173'}/#/dashboard" class="button">View in Dashboard</a>
  `;
  const html = createHtmlTemplate(subject, body);

  try {
    await resend.emails.send({
      from: 'InnovaForge‚Ñ¢ <onboarding@resend.dev>', // Resend requires this for trial accounts
      to: [userEmail],
      subject,
      html,
    });
    console.log(`Idea generated email sent to ${userEmail}`);
  } catch (error) {
    console.error('Failed to send idea generated email:', error);
  }
};

export const sendBuildCompleteEmail = async (resend: Resend, build: BuildForEmail, userEmail: string) => {
  const isSuccess = build.status === 'success';
  const subject = isSuccess ? `‚úÖ Build Succeeded: ${build.ideaTitle}` : `‚ùå Build Failed: ${build.ideaTitle}`;
  const body = `
    <p>The build for your app "${build.ideaTitle}" has completed with status: <strong>${build.status.toUpperCase()}</strong>.</p>
    ${isSuccess && build.stagingUrl ? `<p>You can preview your app here:</p><a href="${build.stagingUrl}" class="button">View Staging App</a>` : ''}
    ${!isSuccess ? `<p>Please check the build logs in your dashboard for more details.</p>` : ''}
  `;
  const html = createHtmlTemplate(subject, body);
  
  try {
    await resend.emails.send({
      from: 'InnovaForge‚Ñ¢ <onboarding@resend.dev>', // Resend requires this for trial accounts
      to: [userEmail],
      subject,
      html,
    });
    console.log(`Build complete email sent to ${userEmail}`);
  } catch (error) {
    console.error('Failed to send build complete email:', error);
  }
};

export const sendSubscriptionUpdateEmail = async (resend: Resend, subscription: SubscriptionForEmail, userEmail: string) => {
  let subject = '';
  let body = '';
  
  if (subscription.status === 'active') {
    subject = `üéâ Welcome to InnovaForge ${subscription.planName.charAt(0).toUpperCase() + subscription.planName.slice(1)}!`;
    body = `
      <p>Your subscription is now active! You now have access to all the features of the <strong>${subscription.planName}</strong> plan.</p>
      <p>Time to start building the future!</p>
      <a href="${functions.config().app.url || 'http://localhost:5173'}/#/dashboard" class="button">Go to Dashboard</a>
    `;
  } else if (subscription.status === 'canceled') {
    subject = `Your InnovaForge Subscription has been Canceled`;
    body = `
      <p>Your subscription has been successfully canceled. You've been moved to the <strong>${subscription.planName}</strong> plan.</p>
      <p>We're sorry to see you go, but you're welcome back anytime!</p>
    `;
  } else {
    return; // Don't send emails for other statuses like 'past_due' yet.
  }

  const html = createHtmlTemplate(subject, body);
  
  try {
    await resend.emails.send({
      from: 'InnovaForge‚Ñ¢ <onboarding@resend.dev>',
      to: [userEmail],
      subject,
      html,
    });
    console.log(`Subscription update email sent to ${userEmail} for status ${subscription.status}`);
  } catch (error) {
    console.error('Failed to send subscription update email:', error);
  }
};